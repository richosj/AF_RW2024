{"version":3,"sources":["business.js","esg.js","fileUpload.js","gnb.js","intro.js","modal.js","validation.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const imgContainer = document.querySelector('.business__imgs');\r\n\r\n    if (!imgContainer) {\r\n        return; // .business__imgs 요소가 없으면 스크립트를 실행하지 않음\r\n    }\r\n\r\n    // 모든 img 요소를 선택합니다.\r\n    const imgElements = imgContainer.querySelectorAll('img[data-src]');\r\n\r\n    // 로더 표시 함수\r\n    const showLoader = (img) => {\r\n        const loader = document.createElement('div');\r\n        loader.classList.add('loader');\r\n        loader.innerText = 'Loading...';\r\n        img.parentNode.appendChild(loader);\r\n    };\r\n\r\n    // 로더 제거 함수\r\n    const hideLoader = (img) => {\r\n        const loader = img.parentNode.querySelector('.loader');\r\n        if (loader) loader.remove();\r\n    };\r\n\r\n    // 이미지 로딩 완료 핸들러\r\n    const onImageLoad = (event) => {\r\n        const img = event.target;\r\n        hideLoader(img);\r\n    };\r\n\r\n    // 이미지 로딩 에러 핸들러\r\n    const onImageError = (event) => {\r\n        const img = event.target;\r\n        hideLoader(img);\r\n        img.alt = 'Failed to load image';\r\n    };\r\n\r\n    // 각 이미지 요소에 대해 처리합니다.\r\n    imgElements.forEach(img => {\r\n        const dataSrc = img.getAttribute('data-src');\r\n        if (dataSrc) {\r\n            const newSrc = !document.querySelector('.solution') \r\n                ? `./assets/images/business/${dataSrc}` \r\n                : `./assets/images/solution/${dataSrc}`;\r\n\r\n            // 로더를 표시합니다.\r\n            showLoader(img);\r\n\r\n            // 이벤트 리스너를 추가합니다.\r\n            img.addEventListener('load', onImageLoad);\r\n            img.addEventListener('error', onImageError);\r\n\r\n            // src 속성을 설정하여 이미지를 로드합니다.\r\n            img.setAttribute('src', newSrc);\r\n        }\r\n    });\r\n\r\n    // 모든 버튼 요소를 선택합니다.\r\n    const buttons = document.querySelectorAll('button[data-trigger=\"modal\"]');\r\n\r\n    // 모달 열기 함수\r\n    const openModal = (modal) => {\r\n        modal.style.display = 'block';\r\n    };\r\n\r\n    // 모달 닫기 함수\r\n    const closeModal = (modal) => {\r\n        modal.style.display = 'none';\r\n    };\r\n\r\n    // 버튼 클릭 이벤트 리스너를 추가합니다.\r\n    buttons.forEach(button => {\r\n        button.addEventListener('click', () => {\r\n            const target = button.getAttribute('data-target');\r\n            const modal = document.querySelector(target);\r\n\r\n            if (modal) {\r\n                openModal(modal);\r\n\r\n                // 모달 닫기 버튼 이벤트 리스너를 추가합니다.\r\n                const closeButton = modal.querySelector('.close');\r\n                if (closeButton) {\r\n                    closeButton.addEventListener('click', () => closeModal(modal));\r\n                }\r\n\r\n                // 모달 외부 클릭 시 닫기 이벤트 리스너를 추가합니다.\r\n                window.addEventListener('click', (event) => {\r\n                    if (event.target === modal) {\r\n                        closeModal(modal);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    });\r\n});\r\n","document.addEventListener('DOMContentLoaded', function(){\r\n     // GSAP과 ScrollTrigger를 등록합니다.\r\n     gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);\r\n\r\n     const cardsWrap = document.querySelector('.cards__wrap');\r\n\r\n     if(!cardsWrap) return;\r\n\r\n     const cardsItem = document.querySelectorAll('.cards__figure');\r\n     gsap.set('.cards__wrap', { clearProps: 'all' });\r\n     gsap.set(cardsWrap, { height: cardsWrap.scrollHeight });\r\n \r\n     const totalItems = cardsItem.length; // 이미지의 총 개수를 계산합니다.\r\n     const progressArray = new Array(totalItems).fill(0); // 각 이미지의 진행률을 저장할 배열입니다.\r\n \r\n     // 전체 진행률을 업데이트하는 함수입니다.\r\n     function updateProgressBar() {\r\n         const totalProgress = progressArray.reduce((sum, progress) => sum + progress, 0) / totalItems;\r\n         const progressPercentage = totalProgress * 100;\r\n         document.querySelector('.progress__bar--gage').style.width = `${progressPercentage}%`;\r\n     }\r\n \r\n     // 각 이미지에 대해 개별 스크롤 애니메이션을 설정합니다.\r\n     cardsItem.forEach((image, idx) => {\r\n         set_scroll_image(image, idx);\r\n     });\r\n \r\n     function set_scroll_image(image, imageNo) {\r\n         gsap.to(image, {\r\n             y: -240,\r\n             scrollTrigger: {\r\n                 id: `st-promotion-image-${imageNo}`,\r\n                 trigger: image,\r\n                 start: 'top bottom',\r\n                 end: 'bottom center',\r\n                 scrub: 0.5,\r\n                 onUpdate: self => {\r\n                     // 개별 이미지의 진행률을 저장합니다.\r\n                     progressArray[imageNo] = self.progress;\r\n                     updateProgressBar(); // 전체 진행률을 업데이트합니다.\r\n                 },\r\n                 onLeave: self => {\r\n                     // 스크롤이 앞으로 이동할 때 진행률을 업데이트합니다.\r\n                     progressArray[imageNo] = 1;\r\n                     updateProgressBar();\r\n                 },\r\n                 onLeaveBack: self => {\r\n                     // 스크롤이 뒤로 이동할 때 진행률을 업데이트합니다.\r\n                     progressArray[imageNo] = 0;\r\n                     updateProgressBar();\r\n                 },\r\n                 onEnterBack: self => {\r\n                     // 스크롤이 뒤에서 다시 앞으로 이동할 때 진행률을 업데이트합니다.\r\n                     progressArray[imageNo] = self.progress;\r\n                     updateProgressBar();\r\n                 }\r\n             }\r\n         });\r\n     }\r\n})","","//import * as validate from './validation.js';\r\ngsap.registerPlugin(ScrollTrigger, ScrollToPlugin);\r\n\r\nlet globalCheckVar = null;\r\nlet OldGlobalCheckVar = null;\r\n\r\nconst mediaScreen = {\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 1000,\r\n  xl: 1440,\r\n  xxl: 1660\r\n};\r\n\r\nconst body = document.body;\r\nconst header = document.getElementById('header');\r\nconst btnMobile = document.getElementById('btnMobile');\r\nconst gnbItems = document.querySelectorAll('#gnb > li');\r\nconst mobileMenuUL = document.querySelector('ul.mobile-menu');\r\nconst mobileMenus = document.querySelectorAll('ul.mobile-menu .menuitem');\r\nconst dropdownButtons = document.querySelectorAll(\".dropdownButton\");\r\n\r\nconst checkScreen = () => {\r\n  const width = window.innerWidth;\r\n\r\n  if (width < mediaScreen.md) {\r\n    globalCheckVar = \"mobile\";\r\n  } else if (width < mediaScreen.lg) {\r\n    globalCheckVar = \"tablet\";\r\n  } else if (width < mediaScreen.xl) {\r\n    globalCheckVar = \"smalldesk\";\r\n  } else if (width < mediaScreen.xxl) {\r\n    globalCheckVar = \"desktop\";\r\n  } else {\r\n    globalCheckVar = \"xxl-desktop\";\r\n  }\r\n\r\n  return globalCheckVar;\r\n};\r\n\r\nconst initClassList = () => {\r\n  globalCheckVar = checkScreen();\r\n  document.body.classList.add(globalCheckVar);\r\n};\r\n\r\nconst handleMobileButtonClick = () => {\r\n  console.log('Mobile clicked');\r\n  btnMobile.classList.toggle('active');\r\n  body.classList.toggle('mobile-active');\r\n};\r\n\r\n\r\nmobileMenuUL.addEventListener('click', function(event) {\r\n  if (event.target && event.target.classList.contains('menuitem')) {\r\n    event.preventDefault();\r\n    const parentLi = event.target.parentElement;\r\n    const siblings = parentLi.parentElement.children;\r\n    Array.prototype.forEach.call(siblings, sibling => {\r\n      if (sibling !== parentLi) {\r\n        sibling.classList.remove('active');\r\n      }\r\n    });\r\n    parentLi.classList.toggle('active');\r\n  }\r\n});\r\n\r\nconst handleGnbItemMouseOver = () => {\r\n  header.classList.add('open');\r\n};\r\n\r\nconst handleGnbItemMouseOut = () => {\r\n  header.classList.remove('open');\r\n};\r\n\r\nconst handleDropdownButtonClick = (button, dropdownMenu, menuItems) => {\r\n  let isOpen = false;\r\n\r\n  const toggleDropdown = () => {\r\n    isOpen = !isOpen;\r\n    button.setAttribute(\"aria-expanded\", isOpen);\r\n    dropdownMenu.style.display = isOpen ? \"block\" : \"none\";\r\n  };\r\n\r\n  button.addEventListener(\"click\", (event) => {\r\n    event.stopPropagation();\r\n    toggleDropdown();\r\n  });\r\n\r\n  button.addEventListener(\"keydown\", (event) => {\r\n    if (event.key === \"ArrowDown\") {\r\n      event.preventDefault();\r\n      if (!isOpen) toggleDropdown();\r\n      menuItems[0].focus();\r\n    }\r\n  });\r\n\r\n  menuItems.forEach((item, index) => {\r\n    item.addEventListener(\"keydown\", (event) => {\r\n      const handleKeyDown = {\r\n        ArrowDown: () => {\r\n          event.preventDefault();\r\n          menuItems[(index + 1) % menuItems.length].focus();\r\n        },\r\n        ArrowUp: () => {\r\n          event.preventDefault();\r\n          menuItems[(index - 1 + menuItems.length) % menuItems.length].focus();\r\n        },\r\n        Escape: () => {\r\n          toggleDropdown();\r\n          button.focus();\r\n        }\r\n      };\r\n      handleKeyDown[event.key]?.();\r\n    });\r\n\r\n    item.addEventListener(\"click\", () => {\r\n      button.textContent = item.textContent;\r\n      toggleDropdown();\r\n    });\r\n  });\r\n\r\n  document.addEventListener(\"click\", (event) => {\r\n    if (!button.contains(event.target) && !dropdownMenu.contains(event.target)) {\r\n      if (isOpen) {\r\n        toggleDropdown();\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// 헤더 스크롤 이벤트\r\nfunction headers() {\r\n  const header = document.querySelector('.header');\r\n  const breadcrumb = document.querySelector('.breadcrumb');\r\n  const breadcrumbTop = header.offsetHeight;\r\n  let lastScrollY = window.pageYOffset || document.documentElement.scrollTop;\r\n\r\n  function updateScrollDirection() {\r\n      const currentScrollY = window.pageYOffset || document.documentElement.scrollTop;\r\n      const isScrollingDown = currentScrollY > lastScrollY;\r\n\r\n      if (header.classList.contains('_sub') && breadcrumb) {\r\n          \r\n\r\n          if (currentScrollY >= breadcrumbTop) {\r\n              if (isScrollingDown) {\r\n                  header.classList.add('hide');\r\n                  header.classList.remove('up');\r\n              } else {\r\n                  header.classList.remove('hide');\r\n                  if (currentScrollY > 0) {\r\n                      header.classList.add('up');\r\n                  } else {\r\n                      header.classList.remove('up');\r\n                  }\r\n              }\r\n          } else {\r\n              header.classList.remove('hide', 'up');\r\n          }\r\n      } else {\r\n          if (isScrollingDown) {\r\n              header.classList.add('hide');\r\n              header.classList.remove('up');\r\n          } else {\r\n              header.classList.remove('hide');\r\n              if (currentScrollY > 0) {\r\n                  header.classList.add('up');\r\n              } else {\r\n                  header.classList.remove('up');\r\n              }\r\n          }\r\n      }\r\n\r\n      lastScrollY = currentScrollY;\r\n  }\r\n\r\n  // 초기 스크롤 상태 반영\r\n  document.addEventListener('DOMContentLoaded', () => {\r\n      lastScrollY = window.pageYOffset || document.documentElement.scrollTop;\r\n\r\n      // 초기 스크롤 상태 반영\r\n      if (header.classList.contains('_sub') && breadcrumb) {\r\n          const breadcrumbTop = breadcrumb.getBoundingClientRect().top + window.scrollY;\r\n\r\n          if (lastScrollY >= breadcrumbTop) {\r\n              header.classList.add('up');\r\n          } else {\r\n              header.classList.remove('up');\r\n          }\r\n      } else {\r\n          if (lastScrollY > 50) {\r\n              header.classList.add('up');\r\n          } else {\r\n              header.classList.remove('up');\r\n          }\r\n      }\r\n  });\r\n\r\n  ScrollTrigger.create({\r\n      trigger: document.body,\r\n      start: \"top top\",\r\n      end: \"bottom bottom\",\r\n      onUpdate: updateScrollDirection\r\n  });\r\n}\r\n\r\n// gnb copy => mobile paste\r\nfunction updateMobileMenu(){\r\n    // gnb 아이디를 가진 ul 태그를 선택\r\n  const gnbUl = document.getElementById('gnb');\r\n  // mobile-menu 클래스를 가진 ul 태그를 선택\r\n  const mobileMenuUl = document.querySelector('ul.mobile-menu');\r\n  if (!mobileMenuUl) return;\r\n  // gnbUl의 자식 요소들을 모두 가져오기\r\n  const gnbChildren = gnbUl.innerHTML;\r\n  // mobileMenuUl에 gnbUl의 자식 요소들을 추가\r\n  mobileMenuUl.innerHTML = gnbChildren;\r\n\r\n  // gnb--li1 클래스를 가진 모든 li 요소 선택\r\n  const gnbLiElements = document.querySelectorAll('#gnb .gnb--li1');\r\n  const firstListUl = document.querySelector('ul.first-list');\r\n\r\n  gnbLiElements.forEach(gnbLi => {\r\n    const firstATag = gnbLi.querySelector('a'); // 첫 번째 a 태그 선택\r\n    if (firstATag) {\r\n      const newLi = document.createElement('li'); // 새로운 li 요소 생성\r\n      newLi.appendChild(firstATag.cloneNode(true)); // a 태그를 복사하여 li에 추가\r\n      firstListUl.appendChild(newLi); // 새로운 ul에 li 추가\r\n    }\r\n  });\r\n}\r\n// 서브 페이지 맨처음 intro 및 메뉴 active 설정\r\n(function pageTitles(){\r\n  const ulElement = document.querySelector('[data-page-title]');\r\n\r\n  if (!ulElement) return;\r\n\r\n  const liElements = ulElement.querySelectorAll('li');\r\n  const pageTitle = ulElement.getAttribute('data-page-title');\r\n\r\n  liElements.forEach(li => {\r\n    if (li.textContent.trim() === pageTitle) {\r\n      li.classList.add('_current');\r\n    }\r\n  });\r\n\r\n  const introTitleElement = document.querySelector('.page_title');\r\n  introTitleElement.textContent = pageTitle;\r\n\r\n  // current\r\n  const pageConentWrap = document.querySelector('[data-layout]');\r\n  const pageConentTitle = pageConentWrap.getAttribute('data-current');\r\n\r\n  const introBgElement = document.querySelector('.intro--banner_bg');\r\n\r\n  introBgElement.classList.add('_'+pageConentTitle)\r\n})()\r\n\r\nconst init = () => {\r\n  \r\n  headers();\r\n  updateMobileMenu()\r\n\r\n  window.addEventListener('resize', function() {\r\n    const screenType = checkScreen();\r\n    \r\n    if (screenType !== OldGlobalCheckVar) {\r\n      const currentClasses = ['mobile', 'tablet', 'smalldesk', 'desktop', 'xxl-desktop'];\r\n  \r\n      // Remove any existing screen size class\r\n      currentClasses.forEach(className => {\r\n        if (document.body.classList.contains(className)) {\r\n          document.body.classList.remove(className);\r\n        }\r\n      });\r\n  \r\n      // Add the new screen size class\r\n      document.body.classList.add(screenType);\r\n  \r\n      // Update the old global check variable\r\n      OldGlobalCheckVar = screenType;\r\n    }\r\n  });\r\n  \r\n  initClassList();\r\n  \r\n  btnMobile.addEventListener('click', handleMobileButtonClick);\r\n  mobileMenus.forEach(menu => {\r\n    menu.addEventListener('click', handleMobileMenuClick);\r\n  });\r\n\r\n  gnbItems.forEach(item => {\r\n    item.addEventListener('mouseover', handleGnbItemMouseOver);\r\n    item.addEventListener('mouseout', handleGnbItemMouseOut);\r\n  });\r\n\r\n  dropdownButtons.forEach(button => {\r\n    const dropdownMenu = document.getElementById(button.getAttribute(\"aria-controls\"));\r\n    const menuItems = dropdownMenu.querySelectorAll('[role=\"menuitem\"]');\r\n    handleDropdownButtonClick(button, dropdownMenu, menuItems);\r\n  });\r\n};\r\ndocument.addEventListener(\"DOMContentLoaded\", init);","const refreshGsapAnimations = () => {\r\n  // Kill existing ScrollTriggers\r\n  ScrollTrigger.getAll().forEach(trigger => trigger.kill());\r\n(function() {\r\n  gsap.registerPlugin(ScrollTrigger,ScrollToPlugin);\r\n  ScrollTrigger.refresh();\r\n  const intro = document.querySelector(\".intro--banner\");\r\n  if (!intro) return;\r\n\r\n  const isNonScroll = document.querySelector('[data-current]');\r\n\r\n  \r\n\r\n  const introTitle = document.querySelector(\".intro--banner_title\");\r\n  const introBackground = document.querySelector(\".intro--banner_bg\");\r\n  \r\n  if(isNonScroll.getAttribute('data-current') == \"board\"){ // 특정 페이지에서 기능 미작동을 위한 조건문\r\n  \r\n\r\n  } else {\r\n    let introStroy = gsap.timeline({\r\n      scrollTrigger: {\r\n          id: 'sub_introTitle',\r\n          trigger : intro,\r\n          start : 'top top',\r\n          end : 'bottom center',\r\n          //toggleClass : 'scroll',\r\n          pin : false,\r\n          //markers : true,\r\n          scrub: 0.3,\r\n          onUpdate : (self) => {\r\n              const scrollPos = self.progress * (window.innerHeight - introTitle.offsetHeight) / 2;\r\n                  introTitle.style.top= `${scrollPos}px`;\r\n          }\r\n      }\r\n    })\r\n    introStroy.to(introTitle, { color : '#fff' , duration : 0.4});\r\n  }\r\n  \r\n  if(isNonScroll.classList.contains('promotion')) return;\r\n\r\n  let introStroyBg = gsap.timeline({ \r\n    scrollTrigger: {\r\n        id: 'sub_intro',\r\n        trigger : intro,\r\n        start : 'top top-=10%',\r\n        end : 'bottom center',\r\n        pin : false,\r\n        scrub: 0.3,\r\n        onLeave : () => {\r\n            //console.log('introStroy end');\r\n        }\r\n    }\r\n  })\r\n  introStroyBg.to(introBackground, { maxWidth : '100%' , duration : 2 , borderRadius : '0rem'})\r\n  .to(introTitle.querySelectorAll(\"h2, p\"), {\r\n    color: '#fff',\r\n    ease: 'none',\r\n  }, 0)\r\n\r\n  \r\n})();\r\n};\r\nrefreshGsapAnimations();\r\nwindow.addEventListener('resize', function() { \r\n  refreshGsapAnimations();\r\n})","","/*\r\n    1. input value;\r\n*/\r\n// 이메일 직접입력 select\r\nconst dirDomain = (el) => {\r\n  let domainList = el;\r\n  domainList = domainList.value;\r\n  if (domainList === \"직접입력\") {\r\n    el.previousElementSibling.value = \"\";\r\n    el.disabled = false;\r\n  } else {\r\n    el.previousElementSibling.value = domainList;\r\n    el.previousElementSibling.disabled = true;\r\n  }\r\n};\r\n\r\nconst validateForm = (el) => {\r\n  const f = el;\r\n  // 이메일 check\r\n  const email = f.firstEmail.value + \"@\" + f.secondEmail.value;\r\n  if (!validateEmail(email)) {\r\n    alert(\"error\");\r\n    return;\r\n  }\r\n  function validateEmail(email) {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  // 핸드폰 번호 체크\r\n  const phoneNumber = f.phoneNumber.value;\r\n  if (!validatePhoneNumber(phoneNumber)) {\r\n    alert(\"error\");\r\n    return;\r\n  }\r\n  function validatePhoneNumber(phoneNumber) {\r\n    const phoneNumberRegex = /^\\d{3}-\\d{3,4}-\\d{4}$/;\r\n    return phoneNumberRegex.test(phoneNumber);\r\n  }\r\n  //const phoneNumberRegex = /^\\d{3}-\\d{3,4}-\\d{4}$/;\r\n};\r\n"]}